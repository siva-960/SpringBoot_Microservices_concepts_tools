service Registry and service discovery(eureka netflix)
=======================================================

->In a microservices architecture, services need to be able to find and communicate with each other.
 	Eureka is a service registry and discovery server that enables microservices to do just that.

->Eureka consists of two main components: the Eureka server and the Eureka client. 
	The Eureka server acts as a central registry where all the microservices register themselves. 
	The Eureka client is a module that runs on each microservice and registers it with the Eureka server.

->When a microservice wants to communicate with another microservice, it queries the Eureka server for the hostname and 
	port of the desired service. The Eureka server responds with the available instances of the service, and the client can 
	then choose one to communicate with.
	
	
The Eureka server also monitors the availability of each registered service instance. 
If a service instance goes down, Eureka will mark it as unavailable, and the client will be redirected to another available instance.

In Spring, you can use the Spring Cloud Netflix Eureka library to implement Eureka service discovery. 
This library provides annotations and configuration options to make it easy to register and discover services in a Spring application.

Overall, Eureka provides a simple and effective way for microservices to find and communicate with each other in a distributed system.



->Eureka is a service registry and discovery services orginally developed by the netflix and now part of spring cloud
->what is the purpose of eureka?
	>In microservice architecture we have number of services avaliable, so to check wether a specific service is up are not is so difficult
	we have to go each and every  service and we have to check whether it is up or not
	>in order to communicate each other we have to hardcode the host name
->how eureka is useful?
	=>In a microservices architecture, services need to be able to communicate with each other in order to function properly. 
	Eureka provides a way for services to dynamically discover and communicate with each other, without having to hardcode specific host
	 and port information.
->how to implement eureka in our project?

	=>Eureka consists of two main components: 
	 1.Eureka server
	 2.Eureka client. 
	 The Eureka server is responsible for registering services and maintaining a registry of available services. 
	 The Eureka client is responsible for registering a service with the Eureka server and discovering other services registered with the same server.
	 
	 To use Eureka in a Spring application, you can add the "Spring Cloud Eureka client" dependency to your project, 
	 and configure the application to register with the Eureka server.
	 Once the application is registered, it can use the Eureka client to discover other services and communicate with them.
	 
	 
Steps to create Eureka server:
==============================
	->create the project:
	=====================
		->create spring stater project:
		===================================
	->add eureka sever dependency
	
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		
	->enable eureka server:
	=======================
	
@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(EurekaServerApplication.class, args);
	}

}

	
->configure the properties:
=============================
#eureka server by default runs in 8761
server.port=8761
#to make our microservices to registry to eureka server
#but this eureka server so we don't want to register it self 
eureka.client.register-with-eureka=false
#to fetch the specific service which is registered with eureka 
#this is eureka server so don't need to fetch
eureka.client.fetch-registry=false



steps to implement eureka client:
=================================
->create spring starter project:
=================================
->create springboot project(Eureka client1)
->create springboot project (Eureka client2)

=>add eureka client dependency in pom.xml:
===========================================
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
</dependency>


	=>but why only for eureka client why not for eureka server - spring-boot-starter-web dependency?
		->The spring-boot-starter-web dependency is required for Eureka client because it contains the necessary libraries for building web applications using Spring Boot.

		->When a microservice registers with Eureka server, it needs to expose its REST API endpoint(s) so that other microservices can discover and communicate with it.
		 The spring-boot-starter-web dependency provides the required libraries for building RESTful web services using Spring Boot, 
		 including the ability to configure a web server, handle HTTP requests and responses, and map URLs to specific functions.

		->On the other hand, the Eureka server itself doesn't need to provide any RESTful API endpoint, 
		it just needs to keep track of registered microservices and maintain a registry of their locations. Therefore, it doesn't require the spring-boot-starter-web dependency.

		->In summary, the spring-boot-starter-web dependency is required for Eureka client because it provides the necessary libraries for building RESTful web services 
		and exposing them to the Eureka server.


=>enable discovery client
===========================

	->There are different ways to enable a Spring Boot application as a Eureka client, depending on the Spring Cloud version and the configuration approach used.
	 Here are some common ways:

	->Using Spring Cloud Netflix Eureka Starter:
		This is the most common way to enable a Spring Boot application as a Eureka client. You can add the spring-cloud-starter-netflix-eureka-client dependency 
		to your project and then annotate the main class with @EnableEurekaClient or @EnableDiscoveryClient annotations.

	->Using Spring Cloud Gateway:
		->If you are using Spring Cloud Gateway to route your requests, you can enable the Eureka client by adding the 
		spring-cloud-starter-netflix-eureka-client dependency to your project and setting the spring.cloud.gateway.discovery.locator.enabled property to true.

	->Using Spring Cloud Kubernetes:
		->If you are running your Spring Boot application on Kubernetes, you can enable the Eureka client by adding the spring-cloud-starter-kubernetes-all 
		dependency to your project and setting the spring.cloud.kubernetes.discovery.enabled property to true.

	->Programmatically:
		->You can also enable the Eureka client programmatically by creating a EurekaInstanceConfig and a DiscoveryClient bean in your application context.

	->Note that in all of these approaches, you need to configure the Eureka server details in your application.properties or application.yml file.

@SpringBootApplication
@EnableDiscoveryClient
public class EurekaClient1Application {

	public static void main(String[] args) {
		SpringApplication.run(EurekaClient1Application.class, args);
	}

}


->in latest springboot need not to enable explicitly with out specifying also it can work bu how its works?
	Starting from Spring Boot 2.4, the @EnableEurekaClient annotation is no longer required to enable the Eureka client. 
	Instead, Spring Boot automatically detects the presence of the spring-cloud-starter-netflix-eureka-client dependency on the classpath and enables the 
	Eureka client by default.

	->This means that if you have included the spring-cloud-starter-netflix-eureka-client dependency in your project, you don't need to explicitly annotate your
	 application class with @EnableEurekaClient. The Eureka client will be automatically enabled and will try to register with the Eureka server specified 
	 in your application.properties or application.yml file.

	->This behavior is part of Spring Boot's auto-configuration mechanism, which automatically configures beans based on the classpath dependencies
	 and the configuration properties. The spring-cloud-starter-netflix-eureka-client dependency includes the necessary auto-configuration classes that set up 
	 the Eureka client and register it with the Spring application context.

	->However, if you need to customize the Eureka client configuration or add additional configuration options, you can still 
	use the @EnableEurekaClient annotation and provide your own configuration classes.
->or by using @EnableDiscoveryClient or @EnableEurekaClient you can specify. 


configure properties in application.properties:
===================================================
#giving unique name to register to the eureka server
spring.application.name=eureka-client1
#giving url so that our application can registered to the specified eureka server
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/


	




























